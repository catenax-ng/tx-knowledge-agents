name: ZAP_ALL

on:
  push:
    branches:
      - main

jobs:
  zap_scan1:
    runs-on: ubuntu-latest
    name: OWASP ZAP 1
    outputs:
      output1: ${{ toJson(steps.step1.outputs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: ZAP Scan 1
        id: step1
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: https://managed-identity-wallets.dev.demo.catena-x.net/
        env:
          OUTPUT1: ${{ toJson(steps.step1.outputs) }}

      - name: Debug ZAP Scan Output
        run: echo "ZAP Scan 1 Output:$OUTPUT1"

  zap_scan2:
    runs-on: ubuntu-latest
    name: OWASP ZAP 2
    needs: zap_scan1
    outputs:
      output2: ${{ toJson(steps.step2.outputs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      - name: Copy OpenAPI JSON
        run: cp .github/workflows/openapi_Knowledge_Agents.json $GITHUB_WORKSPACE

      - name: Check for API Key
        id: api-key
        run: |
          API_KEY=$(jq -r '.security[0].apiKey' $GITHUB_WORKSPACE/openapi_Knowledge_Agents.json)
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV


      - name: ZAP Scan 2
        id: step2
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: https://managed-identity-wallets.dev.demo.catena-x.net/
        env:
          OUTPUT2: ${{ toJson(steps.step2.outputs) }}
          OPENAPI_FILE: $GITHUB_WORKSPACE/openapi_Knowledge_Agents.json
          apikey: ${{ steps.api-key.outputs.API_KEY }}

      - name: Debug ZAP Scan Output
        run: echo "ZAP Scan 2 Output:$OUTPUT2"

  aggregate_results:
    runs-on: ubuntu-latest
    needs: [zap_scan1, zap_scan2]
    steps:
      - name: Combine Outputs
        run: |
          # Extract the outputs from the jobs
          OUTPUT1=$(echo "${{ toJson(needs.zap_scan1.outputs) }}" | jq -r '.output1' || echo "")
          OUTPUT2=$(echo "${{ toJson(needs.zap_scan2.outputs) }}" | jq -r '.output2' || echo "")

          # Combine the outputs as needed
          COMBINED_OUTPUT="$OUTPUT1 $OUTPUT2"

          # Use the combined output as needed
          echo "Combined Output: $COMBINED_OUTPUT"
